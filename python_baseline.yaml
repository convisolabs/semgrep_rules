# ==========================================================
# Semgrep Ruleset for Python Security
# Created by: Conviso
# Description: This ruleset is designed to detect common
#              vulnerabilities in Python applications, including SQL Injection,
#              XSS, Command Injection, Path Traversal, Insecure Deserialization,
#              and more. Suggested fixes included.
# ==========================================================

rules:
  - id: detect-sql-injection
    languages: [python]
    message: |
      Possible SQL Injection vulnerability. Avoid using unsanitized user input in SQL queries.
    severity: ERROR
    patterns:
      - pattern: |
          cursor.execute("SELECT * FROM $TABLE WHERE $COLUMN = '" + $USER_INPUT + "'")
      - pattern: |
          cursor.execute("INSERT INTO $TABLE ... VALUES ('" + $USER_INPUT + "' ... )")
      - pattern: |
          cursor.execute("UPDATE $TABLE SET $COLUMN = '" + $USER_INPUT + "' WHERE ...")
      - pattern-not: |
          cursor.execute("SELECT * FROM $TABLE WHERE $COLUMN = %s", ($USER_INPUT,))
    fix: |
      Use parameterized queries to prevent SQL Injection. Example:
      
      ```python
      # Using parameterized queries in Python with MySQL
      cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
      ```
    metadata:
      cwe: CWE-89
      owasp: A1 Injection

  - id: detect-xss
    languages: [python]
    message: |
      Possible Cross-Site Scripting (XSS) vulnerability. Avoid outputting unsanitized user input in templates or responses.
    severity: ERROR
    patterns:
      - pattern: |
          return $USER_INPUT
      - pattern-not: |
          return escape($USER_INPUT)
    fix: |
      Use escape functions like `escape()` or HTML sanitization libraries to avoid XSS. Example:
      
      ```python
      from markupsafe import escape
      return escape($USER_INPUT)
      ```
    metadata:
      cwe: CWE-79
      owasp: A7 Cross-Site Scripting (XSS)

  - id: detect-command-injection
    languages: [python]
    message: |
      Possible Command Injection vulnerability. Avoid using unsanitized user input in system commands.
    severity: ERROR
    patterns:
      - pattern: |
          os.system("cmd " + $USER_INPUT)
      - pattern: |
          subprocess.run("cmd " + $USER_INPUT, shell=True)
      - pattern-not: |
          subprocess.run(["cmd", $USER_INPUT])
    fix: |
      Use argument lists when invoking system commands to avoid command injection. Example:
      
      ```python
      subprocess.run(["cmd", $USER_INPUT])
      ```
    metadata:
      cwe: CWE-78
      owasp: A1 Injection

  - id: detect-path-traversal
    languages: [python]
    message: |
      Possible Path Traversal vulnerability. Avoid using unsanitized user input in file paths.
    severity: ERROR
    patterns:
      - pattern: |
          open($USER_INPUT)
      - pattern: |
          os.remove($USER_INPUT)
      - pattern-not: |
          open(os.path.abspath($USER_INPUT))
    fix: |
      Use `os.path.abspath()` or `os.path.realpath()` to validate and sanitize file paths. Example:
      
      ```python
      safe_path = os.path.abspath($USER_INPUT)
      open(safe_path)
      ```
    metadata:
      cwe: CWE-22
      owasp: A5 Broken Access Control

  - id: detect-insecure-deserialization
    languages: [python]
    message: |
      Possible insecure deserialization of untrusted data. Avoid deserializing user-controlled input directly.
    severity: ERROR
    patterns:
      - pattern: |
          pickle.loads($USER_INPUT)
    fix: |
      Avoid using `pickle` for deserialization or validate input beforehand. Example:
      
      ```python
      import json
      obj = json.loads($USER_INPUT)
      ```
    metadata:
      cwe: CWE-502
      owasp: A8 Insecure Deserialization

  - id: detect-sensitive-data-exposure
    languages: [python]
    message: |
      Sensitive data exposure. Avoid logging sensitive information such as passwords or credit card numbers.
    severity: WARNING
    patterns:
      - pattern: |
          print($SENSITIVE_DATA)
      - pattern: |
          logger.debug($SENSITIVE_DATA)
    fix: |
      Mask sensitive data before logging or output. Example:
      
      ```python
      print(mask_sensitive_data($SENSITIVE_DATA))
      ```
    metadata:
      cwe: CWE-200
      owasp: A3 Sensitive Data Exposure

  - id: detect-weak-encryption
    languages: [python]
    message: |
      Weak encryption algorithm detected. Avoid using deprecated cryptographic algorithms such as DES.
    severity: ERROR
    patterns:
      - pattern: |
          DES.new($KEY)
      - pattern: |
          ARC4.new($KEY)
      - pattern-not: |
          AES.new($KEY)
    fix: |
      Use strong encryption algorithms such as AES with proper key sizes. Example:
      
      ```python
      from Crypto.Cipher import AES
      cipher = AES.new($KEY, AES.MODE_CBC)
      ```
    metadata:
      cwe: CWE-327
      owasp: A6 Security Misconfiguration

