# ==========================================================
# Semgrep Ruleset for Java Security
# Created by: Conviso
# Description: This ruleset is designed to detect common
#              vulnerabilities in Java applications, including SQL Injection,
#              XSS, Command Injection, Path Traversal, Insecure Deserialization,
#              and more. Includes support for frameworks like Spring and Hibernate.
# ==========================================================

rules:
  - id: detect-sql-injection
    languages: [java]
    message: |
      Possible SQL Injection vulnerability. Avoid using unsanitized user input in SQL queries.
    severity: ERROR
    patterns:
      # Generic pattern for SQL injection across JDBC, Spring JDBC, and Hibernate
      - pattern: |
          Statement stmt = connection.createStatement();
          stmt.executeQuery("SELECT * FROM users WHERE name = '" + $USER_INPUT + "'");
      - pattern: |
          session.createQuery("FROM User WHERE name = '" + $USER_INPUT + "'");
      - pattern: |
          jdbcTemplate.queryForObject("SELECT * FROM users WHERE name = '" + $USER_INPUT + "'");
      - pattern-not: |
          PreparedStatement pstmt = connection.prepareStatement("SELECT * FROM users WHERE name = ?");
          pstmt.setString(1, $USER_INPUT);
    fix: |
      Use parameterized queries or ORM methods to avoid SQL Injection. For example:
      
      ```java
      // Using PreparedStatement in JDBC
      PreparedStatement pstmt = connection.prepareStatement("SELECT * FROM users WHERE name = ?");
      pstmt.setString(1, $USER_INPUT);
      
      // Using Hibernate Query
      session.createQuery("FROM User WHERE name = :name")
             .setParameter("name", $USER_INPUT);
      
      // Using Spring JDBC Template
      jdbcTemplate.queryForObject("SELECT * FROM users WHERE name = ?", new Object[]{ $USER_INPUT });
      ```
    metadata:
      cwe: CWE-89
      owasp: A1: Injection

  - id: detect-xss
    languages: [java]
    message: |
      Possible Cross-Site Scripting (XSS) vulnerability. Avoid outputting unsanitized user input in web responses.
    severity: ERROR
    patterns:
      - pattern: |
          out.println($USER_INPUT);
      - pattern-not: |
          out.println(HtmlUtils.htmlEscape($USER_INPUT));
    fix: |
      Use escaping methods to sanitize user input before output, such as `HtmlUtils.htmlEscape()` in Spring.
      Example:
      
      ```java
      out.println(HtmlUtils.htmlEscape($USER_INPUT));
      ```
    metadata:
      cwe: CWE-79
      owasp: A7: Cross-Site Scripting (XSS)

  - id: detect-command-injection
    languages: [java]
    message: |
      Possible Command Injection vulnerability. Avoid using unsanitized user input in system commands.
    severity: ERROR
    patterns:
      - pattern: |
          Runtime.getRuntime().exec("cmd " + $USER_INPUT);
      - pattern-not: |
          Runtime.getRuntime().exec(new String[]{"cmd", $USER_INPUT});
    fix: |
      Use arrays for passing command arguments or sanitize user input. For example:
      
      ```java
      Runtime.getRuntime().exec(new String[]{"cmd", $USER_INPUT});
      ```
    metadata:
      cwe: CWE-78
      owasp: A1: Injection

  - id: detect-path-traversal
    languages: [java]
    message: |
      Possible Path Traversal vulnerability. Avoid using unsanitized user input in file paths.
    severity: ERROR
    patterns:
      - pattern: |
          new FileInputStream($USER_INPUT);
      - pattern-not: |
          new FileInputStream(new File($USER_INPUT).getCanonicalPath());
    fix: |
      Use `getCanonicalPath()` to sanitize and validate the file path. Example:
      
      ```java
      File file = new File($USER_INPUT);
      String canonicalPath = file.getCanonicalPath();
      FileInputStream fis = new FileInputStream(canonicalPath);
      ```
    metadata:
      cwe: CWE-22
      owasp: A5: Broken Access Control

  - id: detect-insecure-deserialization
    languages: [java]
    message: |
      Possible insecure deserialization of untrusted data. Avoid deserializing user-controlled input directly.
    severity: ERROR
    patterns:
      - pattern: |
          ObjectInputStream ois = new ObjectInputStream(new FileInputStream($USER_INPUT));
          Object obj = ois.readObject();
    fix: |
      Avoid using `ObjectInputStream` with untrusted data or validate the data beforehand. Prefer safer alternatives like JSON or custom serialization:
      
      ```java
      ObjectMapper mapper = new ObjectMapper();
      MyObject obj = mapper.readValue($USER_INPUT, MyObject.class);
      ```
    metadata:
      cwe: CWE-502
      owasp: A8: Insecure Deserialization

  - id: detect-sensitive-data-exposure
    languages: [java]
    message: |
      Sensitive data exposure. Avoid logging sensitive information such as passwords or credit card numbers.
    severity: WARNING
    patterns:
      - pattern: |
          System.out.println($SENSITIVE_DATA);
      - pattern: |
          logger.debug($SENSITIVE_DATA);
    fix: |
      Mask sensitive data before logging or output. For example:
      
      ```java
      System.out.println(maskSensitiveData($SENSITIVE_DATA));
      ```
    metadata:
      cwe: CWE-200
      owasp: A3: Sensitive Data Exposure

  - id: detect-weak-encryption
    languages: [java]
    message: |
      Weak encryption algorithm detected. Avoid using deprecated cryptographic algorithms such as DES.
    severity: ERROR
    patterns:
      - pattern: |
          Cipher.getInstance("DES");
      - pattern-not: |
          Cipher.getInstance("AES");
    fix: |
      Use stronger encryption algorithms such as AES with appropriate key sizes. Example:
      
      ```java
      Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
      ```
    metadata:
      cwe: CWE-327
      owasp: A6: Security Misconfiguration

