# ==========================================================
# Semgrep Ruleset for Django Security
# Created by: Conviso
# Description: This ruleset is designed to detect common
#              vulnerabilities in Django applications, including 
#              SQL Injection, CSRF Protection, and Debug Mode.
# ==========================================================

rules:
  - id: detect-django-raw-sql-injection
    languages: [python]
    message: |
      Possible SQL Injection vulnerability in Django raw SQL query. Avoid using unsanitized user input.
    severity: ERROR
    patterns:
      - pattern: |
          MyModel.objects.raw("SELECT * FROM my_table WHERE column = '" + $USER_INPUT + "'")
    fix: |
      Use Django's query parameterization for raw queries. Example:
      
      ```python
      MyModel.objects.raw("SELECT * FROM my_table WHERE column = %s", [user_input])
      ```
    metadata:
      cwe: CWE-89
      owasp: A1 Injection

  - id: detect-django-csrf-disabled
    languages: [python]
    message: |
      CSRF protection is disabled in Django. This can lead to Cross-Site Request Forgery (CSRF) attacks.
    severity: WARNING
    patterns:
      - pattern: |
          @csrf_exempt
    fix: |
      Avoid disabling CSRF protection unless absolutely necessary. Example:
      
      ```python
      # Only disable CSRF for specific API endpoints that are safe.
      ```
    metadata:
      cwe: CWE-352
      owasp: A8 CSRF

  - id: detect-django-debug-true
    languages: [python]
    message: |
      Debug mode is enabled in Django settings. This can expose sensitive information.
    severity: WARNING
    patterns:
      - pattern: |
          DEBUG = True
    fix: |
      Set `DEBUG` to `False` in production environments. Example:
      
      ```python
      DEBUG = False
      ```
    metadata:
      cwe: CWE-200
      owasp: A6 Security Misconfiguration
