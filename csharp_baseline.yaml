# ==========================================================
# Semgrep Ruleset for C# Security
# Created by: Conviso
# Description: This ruleset is designed to detect common
#              vulnerabilities in C# applications, including SQL Injection,
#              XSS, Command Injection, Path Traversal, Insecure Deserialization,
#              and more. Suggested fixes included.
# ==========================================================

rules:
  - id: detect-sql-injection
    languages: [csharp]
    message: |
      Possible SQL Injection vulnerability. Avoid using unsanitized user input in SQL queries.
    severity: ERROR
    patterns:
      - pattern: |
          $DB.ExecuteQuery("SELECT * FROM $TABLE WHERE $COLUMN = '" + $USER_INPUT + "'")
      - pattern: |
          $DB.ExecuteNonQuery("INSERT INTO $TABLE ... VALUES ('" + $USER_INPUT + "' ... )")
      - pattern: |
          $DB.Prepare("UPDATE $TABLE SET $COLUMN = '" + $USER_INPUT + "' WHERE ...")
      - pattern-not: |
          $stmt = $DB.Prepare("SELECT * FROM $TABLE WHERE $COLUMN = @param");
          $stmt.Parameters.AddWithValue("@param", $USER_INPUT);
    fix: |
      Use parameterized queries to prevent SQL Injection. Example:
      
      ```csharp
      // Using parameterized queries in C#
      SqlCommand cmd = new SqlCommand("SELECT * FROM Users WHERE Username = @username", connection);
      cmd.Parameters.AddWithValue("@username", username);
      ```
    metadata:
      cwe: CWE-89
      owasp: A1: Injection

  - id: detect-xss
    languages: [csharp]
    message: |
      Possible Cross-Site Scripting (XSS) vulnerability. Avoid outputting unsanitized user input in web responses.
    severity: ERROR
    patterns:
      - pattern: |
          Response.Write($USER_INPUT);
      - pattern-not: |
          Response.Write(HttpUtility.HtmlEncode($USER_INPUT));
    fix: |
      Use `HttpUtility.HtmlEncode()` to sanitize user input before output. Example:
      
      ```csharp
      Response.Write(HttpUtility.HtmlEncode($USER_INPUT));
      ```
    metadata:
      cwe: CWE-79
      owasp: A7: Cross-Site Scripting (XSS)

  - id: detect-command-injection
    languages: [csharp]
    message: |
      Possible Command Injection vulnerability. Avoid using unsanitized user input in system commands.
    severity: ERROR
    patterns:
      - pattern: |
          System.Diagnostics.Process.Start("cmd.exe", "/c " + $USER_INPUT);
      - pattern-not: |
          System.Diagnostics.Process.Start("cmd.exe", "/c", $USER_INPUT);
    fix: |
      Use arguments in a secure way when executing system commands. Example:
      
      ```csharp
      System.Diagnostics.Process.Start("cmd.exe", "/c", HttpUtility.HtmlEncode($USER_INPUT));
      ```
    metadata:
      cwe: CWE-78
      owasp: A1: Injection

  - id: detect-path-traversal
    languages: [csharp]
    message: |
      Possible Path Traversal vulnerability. Avoid using unsanitized user input in file paths.
    severity: ERROR
    patterns:
      - pattern: |
          File.ReadAllText($USER_INPUT);
      - pattern: |
          File.Delete($USER_INPUT);
      - pattern-not: |
          File.ReadAllText(Path.GetFullPath($USER_INPUT));
    fix: |
      Use `Path.GetFullPath()` to validate and sanitize file paths. Example:
      
      ```csharp
      string safePath = Path.GetFullPath($USER_INPUT);
      File.ReadAllText(safePath);
      ```
    metadata:
      cwe: CWE-22
      owasp: A5: Broken Access Control

  - id: detect-insecure-deserialization
    languages: [csharp]
    message: |
      Possible insecure deserialization of untrusted data. Avoid deserializing user-controlled input directly.
    severity: ERROR
    patterns:
      - pattern: |
          BinaryFormatter bf = new BinaryFormatter();
          object obj = bf.Deserialize($USER_INPUT);
    fix: |
      Avoid deserializing untrusted data or use safer serialization formats like JSON. Example:
      
      ```csharp
      var data = JsonConvert.DeserializeObject<MyClass>($USER_INPUT);
      ```
    metadata:
      cwe: CWE-502
      owasp: A8: Insecure Deserialization

  - id: detect-sensitive-data-exposure
    languages: [csharp]
    message: |
      Sensitive data exposure. Avoid logging sensitive information such as passwords or credit card numbers.
    severity: WARNING
    patterns:
      - pattern: |
          Console.WriteLine($SENSITIVE_DATA);
      - pattern: |
          log4net.ILog.Debug($SENSITIVE_DATA);
    fix: |
      Mask sensitive data before logging or output. Example:
      
      ```csharp
      Console.WriteLine(MaskSensitiveData($SENSITIVE_DATA));
      ```
    metadata:
      cwe: CWE-200
      owasp: A3: Sensitive Data Exposure

  - id: detect-weak-encryption
    languages: [csharp]
    message: |
      Weak encryption algorithm detected. Avoid using deprecated cryptographic algorithms such as DES.
    severity: ERROR
    patterns:
      - pattern: |
          DESCryptoServiceProvider des = new DESCryptoServiceProvider();
      - pattern-not: |
          AesCryptoServiceProvider aes = new AesCryptoServiceProvider();
    fix: |
      Use strong encryption algorithms such as AES with appropriate key sizes. Example:
      
      ```csharp
      AesCryptoServiceProvider aes = new AesCryptoServiceProvider();
      aes.KeySize = 256;
      ```
    metadata:
      cwe: CWE-327
      owasp: A6: Security Misconfiguration
